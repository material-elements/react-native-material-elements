// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DropDown Component should render correctly 1`] = `
<View
  collapsable={false}
  style={
    [
      undefined,
    ]
  }
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": undefined,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        {
          "alignItems": "center",
          "backgroundColor": "transparent",
          "borderColor": "#BDBDBD",
          "borderRadius": 5,
          "borderWidth": 0.6,
          "display": "flex",
          "flexDirection": "row",
          "opacity": 1,
          "paddingHorizontal": 14,
          "position": "relative",
          "width": "100%",
        }
      }
    >
      <View
        collapsable={false}
        style={
          {
            "backgroundColor": "#ffffff",
            "left": 8,
            "paddingHorizontal": 8,
            "position": "absolute",
            "top": "50%",
            "transform": [
              {
                "translateY": -5,
              },
              {
                "scale": 1,
              },
            ],
            "zIndex": 10,
          }
        }
      >
        <Text
          collapsable={false}
          onLayout={[Function]}
          style={
            {
              "color": "#424242",
              "fontSize": 14,
              "opacity": 1,
            }
          }
        >
          Drop down
        </Text>
      </View>
      <TextInput
        editable={false}
        onBlur={[Function]}
        onFocus={[Function]}
        onLayout={[Function]}
        pointerEvents="none"
        style={
          {
            "backgroundColor": "transparent",
            "color": "#424242",
            "flex": 1,
            "minHeight": 35,
            "position": "relative",
            "width": "100%",
            "zIndex": 12,
          }
        }
        value=""
      />
    </View>
  </View>
</View>
`;

exports[`DropDownListContainer component should render properly with default props 1`] = `
<Modal
  animationType="fade"
  hardwareAccelerated={false}
  transparent={true}
  visible={true}
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": undefined,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      [
        {},
        {},
        [
          {
            "backgroundColor": "rgba(0,0,0,0.5)",
            "flex": 1,
          },
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "paddingHorizontal": 10,
            },
          ],
        ],
      ]
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessible={false}
      collapsable={false}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "backgroundColor": "#E0E0E0",
          "borderRadius": 5,
          "marginTop": 5,
          "maxHeight": undefined,
          "overflow": "hidden",
          "top": 0,
          "width": "100%",
        }
      }
    >
      <RCTScrollView
        getItem={[Function]}
        getItemCount={[Function]}
        keyExtractor={[Function]}
        keyboardShouldPersistTaps="handled"
        nestedScrollEnabled={true}
        onContentSizeChange={[Function]}
        onLayout={[Function]}
        onMomentumScrollBegin={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        overScrollMode="always"
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEnabled={true}
        scrollEventThrottle={0.0001}
        stickyHeaderIndices={[]}
        style={
          [
            {
              "flexGrow": 1,
              "paddingVertical": 2,
            },
          ]
        }
        viewabilityConfigCallbackPairs={[]}
      >
        <View />
      </RCTScrollView>
    </View>
  </View>
</Modal>
`;

exports[`DropDownListContainer component should render the search bar component 1`] = `
<Modal
  animationType="fade"
  hardwareAccelerated={false}
  transparent={true}
  visible={true}
>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": undefined,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      [
        {},
        {},
        [
          {
            "backgroundColor": "rgba(0,0,0,0.5)",
            "flex": 1,
          },
          [
            {
              "backgroundColor": "transparent",
              "flex": 1,
              "paddingHorizontal": 10,
            },
          ],
        ],
      ]
    }
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessible={false}
      collapsable={false}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "backgroundColor": "#E0E0E0",
          "borderRadius": 5,
          "marginTop": 5,
          "maxHeight": undefined,
          "overflow": "hidden",
          "top": 0,
          "width": "100%",
        }
      }
    >
      <View
        style={
          [
            {
              "paddingHorizontal": 5,
              "paddingVertical": 4,
            },
            {},
            undefined,
          ]
        }
      >
        <View>
          <View
            style={
              [
                {
                  "backgroundColor": "#ECEFF1",
                },
                {
                  "testID": "undefined-wrapper",
                },
                [
                  {
                    "alignItems": "center",
                    "display": "flex",
                    "flexDirection": "row",
                    "paddingHorizontal": 10,
                    "width": "100%",
                  },
                  undefined,
                  {
                    "borderColor": "#757575",
                    "borderWidth": 0.7,
                    "height": 30,
                  },
                ],
              ]
            }
            testID="undefined-wrapper"
          >
            <TextInput
              onChangeText={[Function]}
              placeholder="Search"
              placeholderTextColor="#757575"
              style={
                {
                  "color": "#212121",
                  "flex": 1,
                  "minHeight": 35,
                  "width": "100%",
                }
              }
            />
          </View>
        </View>
      </View>
      <RCTScrollView
        getItem={[Function]}
        getItemCount={[Function]}
        keyExtractor={[Function]}
        keyboardShouldPersistTaps="handled"
        nestedScrollEnabled={true}
        onContentSizeChange={[Function]}
        onLayout={[Function]}
        onMomentumScrollBegin={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        overScrollMode="always"
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEnabled={true}
        scrollEventThrottle={0.0001}
        stickyHeaderIndices={[]}
        style={
          [
            {
              "flexGrow": 1,
              "paddingVertical": 2,
            },
          ]
        }
        viewabilityConfigCallbackPairs={[]}
      >
        <View />
      </RCTScrollView>
    </View>
  </View>
</Modal>
`;
